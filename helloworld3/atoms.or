
# Atomix project, atoms.or, atom declarations
# Copyright (c) 2015 Stanford University
# Released under the Apache License v2.0. See the LICENSE file for details.
# Author(s): Eyal Cidon

#<command==atom>: <instancename>: <typename>: <core id>
#<command==wire>: <instancename>: <fifo1>: [fifo2]: ...
#<command==conf>: <instancename>: <conf1>: [conf2]: ...

#in this code we will create a pipline by locating each part of the mock producer-consumer chain
#in a different core

atom: kk0			: BlockKK				: 0
atom: kk1			: BlockKK				: 1
atom: kk2			: BlockKK				: 2
atom: kk3			: BlockKK				: 3

#each block is located in a different core and must be connected to a fifo defined in its core 
atom: producer			: BlockX				: 0
wire: producer			: ff_processIn0
atom: transformer		: BlockA				: 1
wire: transformer		: ff_processIn1:ff_comm1
atom: detransform		: BlockB				: 2
wire: detransform		: ff_comm2:ff_processOut2
atom: consumer			: BlockY				: 3
wire: consumer			: ff_processOut3

#BlockTR transfers data between fifos including fifos located on different cores
#the configuration tells the TR block the type size of the data
#note the TR block is located in the core that the data is transfered to
atom: transfer01		: BlockTR				: 1
wire: transfer01		: ff_processIn0:ff_processIn1
conf: transfer01		: ROUND_UP_N_BYTES_TO_DOUBLE_WORD_MULTIPLE(sizeof(EXILIB_tData_1))
atom: transfer12		: BlockTR				: 2
wire: transfer12		: ff_comm1:ff_comm2
conf: transfer12		: ROUND_UP_N_BYTES_TO_DOUBLE_WORD_MULTIPLE(sizeof(EXILIB_tData_1))
atom: transfer23		: BlockTR				: 3
wire: transfer23		: ff_processOut2:ff_processOut3
conf: transfer23		: ROUND_UP_N_BYTES_TO_DOUBLE_WORD_MULTIPLE(sizeof(EXILIB_tData_1))

#because states are defined on multiple cores each core needs its own blockJ to switch a state
atom: jmpToInitS2_0		: BlockJ				: 0
wire: jmpToInitS2_0		: ff_kk0
conf: jmpToInitS2_0		: initStage2
atom: jmpToInitS3_0		: BlockJ				: 0
wire: jmpToInitS3_0		: ff_kk0
conf: jmpToInitS3_0		: initStage3
atom: jmpToFullRun_0		: BlockJ				: 0
wire: jmpToFullRun_0		: ff_kk0
conf: jmpToFullRun_0		: fullRun

atom: jmpToInitS2_1		: BlockJ				: 1
wire: jmpToInitS2_1		: ff_kk1
conf: jmpToInitS2_1		: initStage2
atom: jmpToInitS3_1		: BlockJ				: 1
wire: jmpToInitS3_1		: ff_kk1
conf: jmpToInitS3_1		: initStage3
atom: jmpToFullRun_1		: BlockJ				: 1
wire: jmpToFullRun_1		: ff_kk1
conf: jmpToFullRun_1		: fullRun

atom: jmpToInitS2_2		: BlockJ				: 2
wire: jmpToInitS2_2		: ff_kk2
conf: jmpToInitS2_2		: initStage2
atom: jmpToInitS3_2		: BlockJ				: 2
wire: jmpToInitS3_2		: ff_kk2
conf: jmpToInitS3_2		: initStage3
atom: jmpToFullRun_2		: BlockJ				: 2
wire: jmpToFullRun_2		: ff_kk2
conf: jmpToFullRun_2		: fullRun

atom: jmpToInitS2_3		: BlockJ				: 3
wire: jmpToInitS2_3		: ff_kk3
conf: jmpToInitS2_3		: initStage2
atom: jmpToInitS3_3		: BlockJ				: 3
wire: jmpToInitS3_3		: ff_kk3
conf: jmpToInitS3_3		: initStage3
atom: jmpToFullRun_3		: BlockJ				: 3
wire: jmpToFullRun_3		: ff_kk3
conf: jmpToFullRun_3		: fullRun

atom: jmpDatTransInit1_0	: BlockJ				: 0
wire: jmpDatTransInit1_0	: ff_kk0
conf: jmpDatTransInit1_0	: datTransInit1
atom: jmpDatTransInit2_0	: BlockJ				: 0
wire: jmpDatTransInit2_0	: ff_kk0
conf: jmpDatTransInit2_0	: datTransInit2
atom: jmpDatTransFull_0		: BlockJ				: 0
wire: jmpDatTransFull_0		: ff_kk0
conf: jmpDatTransFull_0		: datTransFull

atom: jmpDatTransInit1_1	: BlockJ				: 1
wire: jmpDatTransInit1_1	: ff_kk1
conf: jmpDatTransInit1_1	: datTransInit1
atom: jmpDatTransInit2_1	: BlockJ				: 1
wire: jmpDatTransInit2_1	: ff_kk1
conf: jmpDatTransInit2_1	: datTransInit2
atom: jmpDatTransFull_1		: BlockJ				: 1
wire: jmpDatTransFull_1		: ff_kk1
conf: jmpDatTransFull_1		: datTransFull

atom: jmpDatTransInit1_2	: BlockJ				: 2
wire: jmpDatTransInit1_2	: ff_kk2
conf: jmpDatTransInit1_2	: datTransInit1
atom: jmpDatTransInit2_2	: BlockJ				: 2
wire: jmpDatTransInit2_2	: ff_kk2
conf: jmpDatTransInit2_2	: datTransInit2
atom: jmpDatTransFull_2		: BlockJ				: 2
wire: jmpDatTransFull_2		: ff_kk2
conf: jmpDatTransFull_2		: datTransFull

atom: jmpDatTransInit1_3	: BlockJ				: 3
wire: jmpDatTransInit1_3	: ff_kk3
conf: jmpDatTransInit1_3	: datTransInit1
atom: jmpDatTransInit2_3	: BlockJ				: 3
wire: jmpDatTransInit2_3	: ff_kk3
conf: jmpDatTransInit2_3	: datTransInit2
atom: jmpDatTransFull_3		: BlockJ				: 3
wire: jmpDatTransFull_3		: ff_kk3
conf: jmpDatTransFull_3		: datTransFull

atom: jmp0				: BlockJ				: 0
wire: jmp0				: ff_kk0
conf: jmp0				: initStage1
atom: jmp1				: BlockJ				: 1
wire: jmp1				: ff_kk1
conf: jmp1				: initStage1
atom: jmp2				: BlockJ				: 2
wire: jmp2				: ff_kk2
conf: jmp2				: initStage1
atom: jmp3				: BlockJ				: 3
wire: jmp3				: ff_kk3
conf: jmp3				: initStage1



wire: kk0				: ff_kk0
wire: kk1				: ff_kk1
wire: kk2				: ff_kk2
wire: kk3				: ff_kk3

